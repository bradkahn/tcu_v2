-- ...
TYPE state_type IS (IDLE_STATE, WB_WRITE_STATE, WB_READ_STATE);
SIGNAL state, next_state : state_type := IDLE_STATE;
signal cycle_counter : unsigned (2 downto 0) := "000";
-- ...

-- infer state register
state_register : process(CLK_200MHz)
begin
    if rising_edge(CLK_200MHz) then
        if(RST_I = '1') then
            state <= IDLE_STATE;
        else
            state <= next_state;
        end if;
    end if;
end process;

-- synchronous section
synchronous : process(CLK_200MHz)
begin
    if rising_edge(CLK_200MHz) then
        case(state) is
            when IDLE_STATE =>
                cycle_counter <= "000";
                if wb_write = '1' then
                    next_state <= WB_WRITE_STATE;
                elsif wb_read = '1' then
                    next_state <= WB_READ_STATE;
                else
                    next_state <= IDLE_STATE;
                end if;
            when WB_WRITE_STATE =>
                if cycle_counter < 2 then
                    next_state <= WB_WRITE_STATE;
                else
                    next_state <= IDLE_STATE;
                end if;
                cycle_counter  <= cycle_counter + 1;
            when WB_READ_STATE =>
                if cycle_counter < 2 then
                    next_state <= WB_WRITE_STATE;
                else
                    next_state <= IDLE_STATE;
                end if;
                cycle_counter  <= cycle_counter + 1;
            when others =>
                next_state <= IDLE_STATE;
                cycle_counter <= "000"
        end case;
    end if;
end process;

-- combinational section

dat_o_sig   <= gpmc_data_i;
gpmc_data_o <= dat_i_sig;

wb_write_end    <= '1' when state = WB_WRITE_STATE and cycle_counter = 2 else 0;
wb_read_end     <= '1' when state = WB_READ_STATE  and cycle_counter = 2 else 0;

combinational : process(state)
begin
    case(state) is
        when IDLE_STATE =>
            wb_clk_en       <= '0';
            wb_stb_o_sig    <= '0';
            we_o_sig        <= '0';
        when WB_WRITE_STATE =>
            wb_clk_en       <= '1';
            wb_stb_o_sig    <= '1';
            we_o_sig        <= '1';
        when WB_READ_STATE =>
            wb_clk_en       <= '1';
            wb_stb_o_sig    <= '1';
            we_o_sig        <= '0';
        when others =>
            wb_clk_en       <= '0';
            wb_stb_o_sig    <= '0';
            we_o_sig        <= '0';
    end case;
end process;
